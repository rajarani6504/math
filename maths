1
from sympy.physics.vector import *
from sympy import var
var('x,y,z')
v=ReferenceFrame('v')
F=v[0]**2*v[1]*v[2]
G=gradient(F,v)
F=F.subs([(v[0],x), (v[1],y), (v[2],z)])
print("Given scalar function F = ")
display(F)
G=G.subs([(v[0],x), (v[1],y), (v[2],z)])
print("\n Gradient of F=")
display(G)

from sympy import *
x=symbols('x')
y=Function('y')(x)
DE=Eq(4*Derivative(y,x,2) - 4*Derivative(y,x) -3*y , exp(2*x))
GS=dsolve(DE)
display(GS)
-----------------------------------------------------------------------------------------------------
2
from sympy.physics.vector import *
from sympy import var
var('x,y,z')
v=ReferenceFrame('v')
F=3*v[0]**2*v[1]*v[2]
G=gradient(F,v)
F=F.subs([(v[0],x), (v[1],y), (v[2],z)])
print("Given scalar function F = ")
display(F)
G=G.subs([(v[0],x), (v[1],y), (v[2],z)])
print("\n Gradient of F=")
display(G)

from sympy import *
x=symbols('x')
y=Function('y')(x)
DE=Eq(Derivative(y,x,2) - 2*Derivative(y,x) +y, cos(3*x))
GS=dsolve(DE)
display(GS)
-------------------------------------------------------------------------------------------------------
3
from sympy.physics.vector import *
from sympy import var
var('x,y,z')
v=ReferenceFrame('v')
F=v[0]**2*v[1]**3*v[2]**4
G=gradient(F,v)
F=F.subs([(v[0],x), (v[1],y), (v[2],z)])
print("Given scalar function F = ")
display(F)
G=G.subs([(v[0],x), (v[1],y), (v[2],z)])
print("\n Gradient of F=")
display(G)

from sympy import *
x=symbols('x')
y=Function('y')(x)
DE=Eq(Derivative(y,x,2)+y, sin (2*x))
GS=dsolve(DE)
display(GS)
-------------------------------------------------------------------------------------------------------
4.
from sympy.physics. vector import* from sympy import var
var('x,y,z')
v=ReferenceFrame('v')
F=2*v[0]**2*v[2] *v.x-v[0]*v[1]**2*v[2]*v.y+3*v[1]*v[2]**2*v.z G=divergence (F,v)
F=F.subs([(v[e], x), (v[1],y), (v[2],z)]) print("Given vector point function is")
display(F)
G=G. subs([(v[0],x), (v[1],y), (v[2],z)]) print("\n Divergence of F=")
display (G)

from sympy import*
x=symbols ('x')
y=Function('y')(x)
DE=Eq(Derivative (y, x, 2)+2*Derivative (y, x)+y,x**2+2*x)
GS=dsolve (DE)
display (GS)
-------------------------------------------------------------------------------------------------------
5.
from numpy import*
a=0
b=6
p=6
n=7
h=(b-a)/p
x=linspace(a,b,n)
f=(1/(1+x)**2)
for i in range(0,n):
 print(round(f[i],ndigits=4))
TR=round((h/2)*(f[0]+2*sum(f[1:n-1])+f[n-1]),ndigits=4)
S13=round((h/3)*((f[0]+f[n-1])+4*sum(f[1:n-1:2]) +2*sum(f[2:n-1:2])), ndigits=4)
S38=round((3*h/8)*((f[0]+f[n-1])+2*sum(f[3:n-2:3]) +3*sum(f[1:n:3]+(f[2:n-1:3]))),
ndigits=4)
print("The required integral by Trapezoidal Rule is",TR)
print("The required integral by Simpson’s 1/3 Rule is",S13)
print("The required integral by Simpson’s 3/8 Rule is :",S38)

from sympy import *
var('x,y')
p=x*y + y**2
q=x**2
f=diff(q,x)-diff(p,y)
soln=integrate(f,[y,x**2,x],[x,0,1])
print("I=",soln)
----------------------------------------------------------------------------
6.
from sympy.physics.vector import *
from sympy import var
var('x,y,z')
v=ReferenceFrame('v')
F=v[0]*v[1]*v[2]*v.x+3*v[0]**2*v[1]*v.y+(v[0]*v[2]**2-v[1]**2*v[2])*v.z
G=divergence(F,v)
F=F.subs([(v[0],x), (v[1],y), (v[2],z)])
print("Given vector point function is ")
display(F)
G=G.subs([(v[0],x), (v[1],y), (v[2],z)])
print("\n Divergence of F=")
display(G)


from sympy import *
var('x,y')
p=3*x+4*y
q=2*x-3*y
f=diff(q,x)-diff(p,y)
soln=integrate(f,[y,-sqrt(4-x**2),sqrt(4-x**2)],[x,-2,2])
print("I=",soln)
-----------------------------------------------------------------------------
7.
from sympy import *
import numpy as np
def RungeKutta (g,x0 ,h,y0 ,xn):
 x,y= symbols ('x,y')
 f=lambdify([x,y],g)
 xt=x0+h
 Y=[y0]
 while xt<=xn:
 k1=h*f(x0 ,y0)
 k2=h*f(x0+h/2, y0+k1/2)
 k3=h*f(x0+h/2, y0+k2/2)
 k4=h*f(x0+h, y0+k3)
 y1=y0+(1/6)*(k1+2*k2+2*k3+k4)
 Y. append (y1)
 x0=xt
 y0=y1
 xt=xt+h
 return np. round (Y,2)
RungeKutta ('1+(y/x)',1 ,0.2, 2,2)

from sympy.physics.vector import *
from sympy import var
var('x,y,z')
v=ReferenceFrame('v')
F=v[0]**2*v[1]*v[2]*v.x+2*v[0]*v[1]**2*v[2]*v.y+v[0]*v[1]*v[2]**2*v.z
G=curl(F,v)
F=F.subs([(v[0],x), (v[1],y), (v[2],z)])
print("Given vector point function is ")
display(F)
G=G.subs([(v[0],x), (v[1],y), (v[2],z)])
print("\n Curl of F=")
display(G)
------------------------------------------------------------------------------
8.
from numpy import *
a=0
b=1
p=6
n=7
h=(b-a)/p
x=linspace(a,b,n)
f=sqrt(1+x**3)
for i in range(0,n):
 print(round(f[i],ndigits=4))
TR=round((h/2)*(f[0]+2*sum(f[1:n-1])+f[n-1]),ndigits=4)
S13=round((h/3)*((f[0]+f[n-1])+4*sum(f[1:n-1:2]) +2*sum(f[2:n-1:2])),
ndigits=4)
S38=round((3*h/8)*((f[0]+f[n-1])+2*sum(f[3:n-2:3])
+3*sum(f[1:n:3]+(f[2:n-1:3]))),ndigits=4)
print("The required integral by Trapezoidal Rule is",TR)
print("The required integral by Simpson’s 1/3 Rule is",S13)
print("The required integral by Simpson’s 3/8 Rule is :",S38)

from sympy.physics.vector import *
from sympy import var
var('x,y,z')
v=ReferenceFrame('v')
F=v[0]*v[1]**2*v.x+2*v[0]**2*v[1]*v[2]*v.y-3*v[1]*v[2]**2*v.z
G=curl(F,v)
F=F.subs([(v[0],x), (v[1],y), (v[2],z)])
print("Given vector point function is ")
display(F)
G=G.subs([(v[0],x), (v[1],y), (v[2],z)])
print("\n Curl of F=")
display(G)
-----------------------------------------------------------------------------
9.
from numpy import*
a = 0
b = 6
p = 6
n = 7
h=(b-a)/p
x=linspace(a,b,n)
f=(1/ (1 + x) ^ ** 2)
for i in range(0,n):
print(round(f[i],ndigits=4))
TR=round((h/2)*(f[0]+2*sum (f[1:n-1])+f[n-1]), ndigits=4)
S13=round((h/3)*((f[0]+f[n-1])+4*sum (f[1:n-1:2])+2*sum (f[2:n-1:2])), ndigits=4)
S38=round (3^ * h/8)^ * ( (f[theta] + f[n - 1]) * 2*sum (f[3:n-2:3])+3*sum (f[1 / n / 3] + (f[2 / n - 1/3])) ) ,ndigits=4)
print("The required integral by trapezoidal rule is", TR)
print("The required integral by simpsons 1/3 rule is", 513)
print("The required integral by simpsons 3/8 rule is", S38)


from sympy . solvers .pde import pdsolve
from sympy import Function , Eq ,cot , classify_pde , pprint
from sympy .abc import x, y, a
f = Function ('f')
z = f(x, y)
zx = z.diff (x)
zy = z.diff (y)
# Solve xp+yq=z
eq = Eq(x*zx+y*zy , z)
pprint (eq)
print ("\n")
soln = pdsolve (eq ,z)
pprint( soln )
----------------------------------------------------------------------------------------------------------------------------------------
10.
from numpy import*
a=0
b=1
p=6
n=7
h=(b-a)/p
x=linspace(a,b,n)
f=(1/(1+x))
for i in range(0,n):
 print(round(f[i],ndigits=4))
TR=round((h/2)*(f[0]+2*sum(f[1:n-1])+f[n-1]),ndigits=4)
S13=round((h/3)*((f[0]+f[n-1])+4*sum(f[1:n-1:2]) +2*sum(f[2:n-1:2])),ndigits=4)
S38=round((3*h/8)*((f[0]+f[n-1])+2*sum(f[3:n-2:3]) +3*sum(f[1:n:3]+(f[2:n-1:3]))),
ndigits=4)
print("The required integral by Trapezoidal Rule is",TR)
print("The required integral by Simpson’s 1/3 Rule is",S13)
print("The required integral by Simpson’s 3/8 Rule is :",S38)

from sympy.vector import*
from sympy import symbols
N=CoordSys3D(' ')
print("\n The given scalar point function is\n")
f=N.x**2*N.y+N.z
display (f)
delop=Del()
display (delop (f))
gradf-gradient(f))
print("\n Gradient of {f} is\n") 
display (gradf)
-----------------------------------------------------------------------------------------
